<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Groovy 3之Native Lambda及Method/Constructor Reference</title>
    <url>/2018/02/18/Groovy-3%E4%B9%8BNative-Lambda%E5%8F%8AMethod-Constructor-Reference/</url>
    <content><![CDATA[<p>&emsp;&emsp;虽然Groovy 3 Alpha版本就已经支持Java 8的Lambda、Method Reference以及Constructor Reference全部语法，但从bytecode层面来看，其本质上依然是Closure及Method Pointer，换言之，只是语法上的兼容，但性能上并没有提升。而Groovy的性能常为人诟病，所以Groovy 2引入了静态编译，其编译出来的bytecode跟Java的相近，所以其性能逼近Java。为了延续静态编译的性能优势，Groovy核心团队决定在Groovy 3 Beta版本中实现Lambda、Method Reference以及Constructor Reference的Native版本，其语法不变，但生成的bytecode与Java的相似，这便是”Native”的由来。<span id="more"></span></p>
<p>&emsp;&emsp;Groovy 3编译器会借助静态编译的类型推断以及Java 7引入的invokedynamic指令生成与Java相似的bytecode，但如果类型推断失败，那么生成的bytecode则与Closure及Method Pointer相同。需要注意一点的是，除了性能方面的考量，在设计和实现Native Lambda时还考虑了尽可能保留Closure既有特性，为此每个Native Lambda都会对应一个内部类实例，性能方面稍有影响。另外，从DSL角度来看，Native Lambda无法引用自身，也无法引用外层Native Lambda实例，所以Native Lambda相对Closure而言不太适合应用于DSL的实现。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>&emsp;&emsp;下面提供一个简单例子来展示Native Lambda、Native Method Reference以及Native Constructor Reference的bytecode</p>
<h4 id="NativeDemo的Groovy源码"><a href="#NativeDemo的Groovy源码" class="headerlink" title="NativeDemo的Groovy源码"></a>NativeDemo的Groovy源码</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.transform.CompileStatic</span><br><span class="line"></span><br><span class="line"><span class="meta">@CompileStatic</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeDemo</span> &#123;</span></span><br><span class="line">    <span class="keyword">def</span> nativeLambda() &#123;</span><br><span class="line">    	[<span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>].stream().map(e -&gt; Math.abs(e)).toList()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">def</span> nativeMethodReference() &#123;</span><br><span class="line">    	[<span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>].stream().map(<span class="attr">Math:</span>:abs).toList()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">def</span> nativeConstructorReference() &#123;</span><br><span class="line">    	[<span class="number">1</span>, <span class="number">-2</span>, <span class="number">3</span>].stream().toArray(Integer[]::<span class="keyword">new</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="NativeDemo的bytecode"><a href="#NativeDemo的bytecode" class="headerlink" title="NativeDemo的bytecode"></a>NativeDemo的bytecode</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class version 52.0 (52)</span></span><br><span class="line"><span class="comment">// access flags 0x21</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeDemo</span> <span class="keyword">implements</span> <span class="title">groovy</span>/<span class="title">lang</span>/<span class="title">GroovyObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compiled from: script1617499378185.groovy</span></span><br><span class="line">  <span class="comment">// access flags 0x11</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> INNERCLASS NativeDemo$_nativeLambda_lambda1 <span class="keyword">null</span> _nativeLambda_lambda1</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x100A</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> synthetic Lorg/codehaus/groovy/reflection/ClassInfo; $staticClassInfo</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1089</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> synthetic Z __$stMC</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1082</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> synthetic Lgroovy/lang/MetaClass; metaClass</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> &lt;init&gt;()V</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Generated;()</span><br><span class="line">   L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL NativeDemo.$getStaticMetaClass ()Lgroovy/lang/MetaClass;</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    SWAP</span><br><span class="line">    PUTFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    POP</span><br><span class="line">   L1</span><br><span class="line">    RETURN</span><br><span class="line">    LOCALVARIABLE <span class="keyword">this</span> LNativeDemo; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">nativeLambda</span><span class="params">()</span>Ljava/lang/Object</span>;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER <span class="number">6</span> L0</span><br><span class="line">    ICONST_3</span><br><span class="line">    ANEWARRAY java/lang/Object</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_0</span><br><span class="line">    ICONST_1</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_1</span><br><span class="line">    BIPUSH -<span class="number">2</span></span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_2</span><br><span class="line">    ICONST_3</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.createList ([Ljava/lang/Object;)Ljava/util/List;</span><br><span class="line">    INVOKEINTERFACE java/util/Collection.stream ()Ljava/util/stream/Stream; (itf)</span><br><span class="line">    NEW NativeDemo$_nativeLambda_lambda1</span><br><span class="line">    DUP</span><br><span class="line">    LDC LNativeDemo;.class</span><br><span class="line">    DUP</span><br><span class="line">    INVOKESPECIAL NativeDemo$_nativeLambda_lambda1.&lt;init&gt; (Ljava/lang/Object;Ljava/lang/Object;)V</span><br><span class="line">    <span class="function">INVOKEDYNAMIC <span class="title">apply</span><span class="params">(LNativeDemo$_nativeLambda_lambda1;)</span>Ljava/util/function/Function</span>; [</span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">      <span class="comment">// arguments:</span></span><br><span class="line">      (Ljava/lang/Object;)Ljava/lang/Object;, </span><br><span class="line">      <span class="comment">// handle kind 0x5 : INVOKEVIRTUAL</span></span><br><span class="line">      NativeDemo$_nativeLambda_lambda1.doCall(Ljava/lang/Integer;)Ljava/lang/Object;, </span><br><span class="line">      (Ljava/lang/Integer;)Ljava/lang/Object;</span><br><span class="line">    ]</span><br><span class="line">    INVOKEINTERFACE java/util/stream/Stream.map (Ljava/util/function/Function;)Ljava/util/stream/Stream; (itf)</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/vmplugin/v8/PluginDefaultGroovyMethods.toList (Ljava/util/stream/Stream;)Ljava/util/List;</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE <span class="keyword">this</span> LNativeDemo; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">5</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">nativeMethodReference</span><span class="params">()</span>Ljava/lang/Object</span>;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER <span class="number">9</span> L0</span><br><span class="line">    ICONST_3</span><br><span class="line">    ANEWARRAY java/lang/Object</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_0</span><br><span class="line">    ICONST_1</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_1</span><br><span class="line">    BIPUSH -<span class="number">2</span></span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_2</span><br><span class="line">    ICONST_3</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.createList ([Ljava/lang/Object;)Ljava/util/List;</span><br><span class="line">    INVOKEINTERFACE java/util/Collection.stream ()Ljava/util/stream/Stream; (itf)</span><br><span class="line">    <span class="function">INVOKEDYNAMIC <span class="title">apply</span><span class="params">()</span>Ljava/util/function/Function</span>; [</span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">      <span class="comment">// arguments:</span></span><br><span class="line">      (Ljava/lang/Object;)Ljava/lang/Object;, </span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      java/lang/Math.abs(I)I, </span><br><span class="line">      (Ljava/lang/Integer;)I</span><br><span class="line">    ]</span><br><span class="line">    INVOKEINTERFACE java/util/stream/Stream.map (Ljava/util/function/Function;)Ljava/util/stream/Stream; (itf)</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/vmplugin/v8/PluginDefaultGroovyMethods.toList (Ljava/util/stream/Stream;)Ljava/util/List;</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE <span class="keyword">this</span> LNativeDemo; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">4</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">nativeConstructorReference</span><span class="params">()</span>Ljava/lang/Object</span>;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER <span class="number">12</span> L0</span><br><span class="line">    ICONST_3</span><br><span class="line">    ANEWARRAY java/lang/Object</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_0</span><br><span class="line">    ICONST_1</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_1</span><br><span class="line">    BIPUSH -<span class="number">2</span></span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_2</span><br><span class="line">    ICONST_3</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    AASTORE</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.createList ([Ljava/lang/Object;)Ljava/util/List;</span><br><span class="line">    INVOKEINTERFACE java/util/Collection.stream ()Ljava/util/stream/Stream; (itf)</span><br><span class="line">    <span class="function">INVOKEDYNAMIC <span class="title">apply</span><span class="params">()</span>Ljava/util/function/IntFunction</span>; [</span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      java/lang/invoke/LambdaMetafactory.metafactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span><br><span class="line">      <span class="comment">// arguments:</span></span><br><span class="line">      (I)Ljava/lang/Object;, </span><br><span class="line">      <span class="comment">// handle kind 0x6 : INVOKESTATIC</span></span><br><span class="line">      NativeDemo.ctorRef$nativeConstructorReference$<span class="number">0</span>(I)[Ljava/lang/Integer;, </span><br><span class="line">      (I)[Ljava/lang/Integer;</span><br><span class="line">    ]</span><br><span class="line">    INVOKEINTERFACE java/util/stream/Stream.toArray (Ljava/util/function/IntFunction;)[Ljava/lang/Object; (itf)</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE <span class="keyword">this</span> LNativeDemo; L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">4</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1004</span></span><br><span class="line">  <span class="keyword">protected</span> synthetic $getStaticMetaClass()Lgroovy/lang/MetaClass;</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class;</span><br><span class="line">    LDC LNativeDemo;.class</span><br><span class="line">    IF_ACMPEQ L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.initMetaClass (Ljava/lang/Object;)Lgroovy/lang/MetaClass;</span><br><span class="line">    ARETURN</span><br><span class="line">   L0</span><br><span class="line">   FRAME SAME</span><br><span class="line">    GETSTATIC NativeDemo.$staticClassInfo : Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    IFNONNULL L1</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class;</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/reflection/ClassInfo.getClassInfo (Ljava/lang/Class;)Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">    DUP</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    PUTSTATIC NativeDemo.$staticClassInfo : Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">   L1</span><br><span class="line">   FRAME APPEND [org/codehaus/groovy/reflection/ClassInfo]</span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    INVOKEVIRTUAL org/codehaus/groovy/reflection/ClassInfo.getMetaClass ()Lgroovy/lang/MetaClass;</span><br><span class="line">    ARETURN</span><br><span class="line">    MAXSTACK = <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">getMetaClass</span><span class="params">()</span>Lgroovy/lang/MetaClass</span>;</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Generated;()</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Internal;()</span><br><span class="line">  <span class="meta">@Ljava</span>/beans/Transient;()</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    GETFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    DUP</span><br><span class="line">    IFNULL L0</span><br><span class="line">    ARETURN</span><br><span class="line">   L0</span><br><span class="line">   FRAME SAME1 groovy/lang/MetaClass</span><br><span class="line">    POP</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    DUP</span><br><span class="line">    INVOKEVIRTUAL NativeDemo.$getStaticMetaClass ()Lgroovy/lang/MetaClass;</span><br><span class="line">    PUTFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    GETFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    ARETURN</span><br><span class="line">    MAXSTACK = <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">setMetaClass</span><span class="params">(Lgroovy/lang/MetaClass;)</span>V</span></span><br><span class="line"><span class="function">  @Lgroovy/transform/Generated</span>;()</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Internal;()</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    PUTFIELD NativeDemo.metaClass : Lgroovy/lang/MetaClass;</span><br><span class="line">    RETURN</span><br><span class="line">    MAXSTACK = <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x101A</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> synthetic ctorRef$nativeConstructorReference$<span class="number">0</span>(I)[Ljava/lang/Integer;</span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/Generated;() <span class="comment">// invisible</span></span><br><span class="line">  <span class="meta">@Lgroovy</span>/transform/CompileStatic;() <span class="comment">// invisible</span></span><br><span class="line">   L0</span><br><span class="line">    ILOAD <span class="number">0</span></span><br><span class="line">    MULTIANEWARRAY [Ljava/lang/Integer; <span class="number">1</span></span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE param0 I L0 L1 <span class="number">0</span></span><br><span class="line">    MAXSTACK = <span class="number">1</span></span><br><span class="line">    MAXLOCALS = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="NativeDemo-nativeLambda-lambda1的bytecode（为Native-Lambda而生成）"><a href="#NativeDemo-nativeLambda-lambda1的bytecode（为Native-Lambda而生成）" class="headerlink" title="NativeDemo$_nativeLambda_lambda1的bytecode（为Native Lambda而生成）"></a>NativeDemo$_nativeLambda_lambda1的bytecode（为Native Lambda而生成）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class version 52.0 (52)</span></span><br><span class="line"><span class="comment">// access flags 0x31</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeDemo</span>$<span class="title">_nativeLambda_lambda1</span> <span class="keyword">extends</span> <span class="title">groovy</span>/<span class="title">lang</span>/<span class="title">Closure</span> <span class="keyword">implements</span> <span class="title">org</span>/<span class="title">codehaus</span>/<span class="title">groovy</span>/<span class="title">runtime</span>/<span class="title">GeneratedLambda</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// compiled from: script1617499378185.groovy</span></span><br><span class="line">  <span class="function">OUTERCLASS NativeDemo <span class="title">nativeLambda</span> <span class="params">()</span>Ljava/lang/Object</span>;</span><br><span class="line">  <span class="comment">// access flags 0x11</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> INNERCLASS NativeDemo$_nativeLambda_lambda1 <span class="keyword">null</span> _nativeLambda_lambda1</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x100A</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> synthetic Lorg/codehaus/groovy/reflection/ClassInfo; $staticClassInfo</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1089</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> synthetic Z __$stMC</span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="keyword">public</span> &lt;init&gt;(Ljava/lang/Object;Ljava/lang/Object;)V</span><br><span class="line">   L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">2</span></span><br><span class="line">    INVOKESPECIAL groovy/lang/Closure.&lt;init&gt; (Ljava/lang/Object;Ljava/lang/Object;)V</span><br><span class="line">   L1</span><br><span class="line">    RETURN</span><br><span class="line">    LOCALVARIABLE <span class="keyword">this</span> LNativeDemo$_nativeLambda_lambda1; L0 L1 <span class="number">0</span></span><br><span class="line">    LOCALVARIABLE _outerInstance Ljava/lang/Object; L0 L1 <span class="number">1</span></span><br><span class="line">    LOCALVARIABLE _thisObject Ljava/lang/Object; L0 L1 <span class="number">2</span></span><br><span class="line">    MAXSTACK = <span class="number">3</span></span><br><span class="line">    MAXLOCALS = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1</span></span><br><span class="line">  <span class="comment">// signature (Ljava/lang/Integer;)TR;</span></span><br><span class="line">  <span class="comment">// declaration: R doCall(java.lang.Integer)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">doCall</span><span class="params">(Ljava/lang/Integer;)</span>Ljava/lang/Object</span>;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER <span class="number">6</span> L0</span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Integer.intValue ()I</span><br><span class="line">    INVOKESTATIC java/lang/Math.abs (I)I</span><br><span class="line">    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER <span class="number">6</span> L1</span><br><span class="line">   FRAME FULL [] [java/lang/Throwable]</span><br><span class="line">    NOP</span><br><span class="line">    ATHROW</span><br><span class="line">   L2</span><br><span class="line">    LOCALVARIABLE <span class="keyword">this</span> LNativeDemo$_nativeLambda_lambda1; L0 L2 <span class="number">0</span></span><br><span class="line">    LOCALVARIABLE e Ljava/lang/Integer; L0 L2 <span class="number">1</span></span><br><span class="line">    MAXSTACK = <span class="number">1</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// access flags 0x1004</span></span><br><span class="line">  <span class="keyword">protected</span> synthetic $getStaticMetaClass()Lgroovy/lang/MetaClass;</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class;</span><br><span class="line">    LDC LNativeDemo$_nativeLambda_lambda1;.class</span><br><span class="line">    IF_ACMPEQ L0</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/runtime/ScriptBytecodeAdapter.initMetaClass (Ljava/lang/Object;)Lgroovy/lang/MetaClass;</span><br><span class="line">    ARETURN</span><br><span class="line">   L0</span><br><span class="line">   FRAME SAME</span><br><span class="line">    GETSTATIC NativeDemo$_nativeLambda_lambda1.$staticClassInfo : Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    IFNONNULL L1</span><br><span class="line">    ALOAD <span class="number">0</span></span><br><span class="line">    INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class;</span><br><span class="line">    INVOKESTATIC org/codehaus/groovy/reflection/ClassInfo.getClassInfo (Ljava/lang/Class;)Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">    DUP</span><br><span class="line">    ASTORE <span class="number">1</span></span><br><span class="line">    PUTSTATIC NativeDemo$_nativeLambda_lambda1.$staticClassInfo : Lorg/codehaus/groovy/reflection/ClassInfo;</span><br><span class="line">   L1</span><br><span class="line">   FRAME APPEND [org/codehaus/groovy/reflection/ClassInfo]</span><br><span class="line">    ALOAD <span class="number">1</span></span><br><span class="line">    INVOKEVIRTUAL org/codehaus/groovy/reflection/ClassInfo.getMetaClass ()Lgroovy/lang/MetaClass;</span><br><span class="line">    ARETURN</span><br><span class="line">    MAXSTACK = <span class="number">2</span></span><br><span class="line">    MAXLOCALS = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy 3</tag>
        <tag>Closure</tag>
        <tag>Lambda</tag>
        <tag>Method Reference</tag>
        <tag>Constructor Reference</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy 3之新特性预览</title>
    <url>/2017/04/15/Groovy-3%E4%B9%8B%E6%96%B0%E7%89%B9%E6%80%A7%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>Groovy面世已有10多年光阴，在不断创新的同时还汲取了不少其他语言的优秀特性。目前Groovy核心团队已开始将重心逐渐转移到Groovy 3的研发上，而Groovy 3的主要亮点之一便是其全新的解析器以及更加丰富的语言特性。由于前期为Groovy研发了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmllbHN1bjExMDYvZ3Jvb3Z5LXBhcnNlcg==">这一全新的解析器<i class="fa fa-external-link-alt"></i></span>并添加了不少语言特性，<span class="exturl" data-url="aHR0cDovL21haWwtYXJjaGl2ZXMuYXBhY2hlLm9yZy9tb2RfbWJveC9ncm9vdnktdXNlcnMvMjAxNjExLm1ib3gvJTNDQ0FNYmtFN1QlMkJjc2h2eWklMkI0VFpCNndGaW1wOEIxcnlDMm1iMWdZekdZV0xkX3olM0Q4S3FRJTQwbWFpbC5nbWFpbC5jb20lM0U=">有幸受邀成为Groovy核心团队的一员<i class="fa fa-external-link-alt"></i></span>。最初我将该全新的解析器命名为“Parrot”，其含义相对比较谦卑，即“鹦鹉学舌”，学着如何说Groovy以及Java8，通过数月陆陆续续地完善，已达到一定的成熟度并<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9ncm9vdnkvY29tbWl0L2EzZjg2NzFiNWZiNmNlODNhN2MzYzY1YzA0ZDQ2NjI2ZGRiYjY0NmE=">已被纳入master分支<i class="fa fa-external-link-alt"></i></span>。<span id="more"></span></p>
<p>接下来的内容将主要介绍一下这些新特性。可在<span class="exturl" data-url="aHR0cHM6Ly9ncm9vdnkuYXBhY2hlLm9yZy9kb3dubG9hZC5odG1s">Groovy官方网站<i class="fa fa-external-link-alt"></i></span>下载Groovy 3尝鲜。</p>
<p><strong>注：</strong> 在Apache Groovy 3.0.0的Release Note中对该解析器有较为全面地介绍：<span class="exturl" data-url="aHR0cDovL2dyb292eS1sYW5nLm9yZy9yZWxlYXNlbm90ZXMvZ3Jvb3Z5LTMuMC5odG1s">http://groovy-lang.org/releasenotes/groovy-3.0.html<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="新特性预览"><a href="#新特性预览" class="headerlink" title="新特性预览"></a>新特性预览</h2><h3 id="1-完善循环语句"><a href="#1-完善循环语句" class="headerlink" title="1. 完善循环语句"></a>1. 完善循环语句</h3><p>在Groovy 3之前，Groovy既不支持do-while语句，也不支持真正符合Java语法规范的for语句（比如：多个初始化以及多个更新表达式）。在Groovy 3中，对循环语句做了完整的支持，令Java背景的开发人员可以更加平缓地过度到Groovy开发。举些例子：</p>
<h4 id="do-while语句示例"><a href="#do-while语句示例" class="headerlink" title="do-while语句示例"></a>do-while语句示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    i++</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> i == <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h4 id="符合Java语法规范的for语句示例"><a href="#符合Java语法规范的for语句示例" class="headerlink" title="符合Java语法规范的for语句示例"></a>符合Java语法规范的for语句示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">5</span> &amp;&amp; j &lt; <span class="number">5</span>; i = i + <span class="number">2</span>, j++) &#123;</span><br><span class="line">    result += i;</span><br><span class="line">    result += j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> <span class="number">9</span> == result</span><br></pre></td></tr></table></figure>
<h3 id="2-支持Lambda表达式"><a href="#2-支持Lambda表达式" class="headerlink" title="2. 支持Lambda表达式"></a>2. 支持Lambda表达式</h3><p>Java 8引入了Lambda表达式，为了更好地兼容Java的语法，Groovy 3也新增了对该语法特性的支持。举些例子：</p>
<h4 id="Lambda表达式示例"><a href="#Lambda表达式示例" class="headerlink" title="Lambda表达式示例"></a>Lambda表达式示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">9</span> == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].stream().map(e -&gt; e + <span class="number">1</span>).reduce(<span class="number">0</span>, (r, e) -&gt; r + e)</span><br></pre></td></tr></table></figure>
<h3 id="3-支持方法引用（method-reference）和构造器引用（constructor-reference）"><a href="#3-支持方法引用（method-reference）和构造器引用（constructor-reference）" class="headerlink" title="3. 支持方法引用（method reference）和构造器引用（constructor reference）"></a>3. 支持方法引用（method reference）和构造器引用（constructor reference）</h3><p>Java 8除了引入了Lambda表达式，还引入了方法引用（method reference）和构造器引用（constructor reference），基于同样的原因，Groovy 3也新增了对该语法特性的支持。举些例子：</p>
<h4 id="方法引用（method-reference）示例"><a href="#方法引用（method-reference）示例" class="headerlink" title="方法引用（method reference）示例"></a>方法引用（method reference）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>] == [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].stream().map(<span class="attr">String:</span>:toUpperCase).collect(Collectors.toList())</span><br></pre></td></tr></table></figure>
<h4 id="构造器引用（constructor-reference）示例"><a href="#构造器引用（constructor-reference）示例" class="headerlink" title="构造器引用（constructor reference）示例"></a>构造器引用（constructor reference）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">as</span> String[] == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].stream().map(<span class="attr">String:</span>:valueOf).toArray(String[]::<span class="keyword">new</span>)</span><br></pre></td></tr></table></figure>
<h3 id="4-支持try-with-resources语句"><a href="#4-支持try-with-resources语句" class="headerlink" title="4. 支持try-with-resources语句"></a>4. 支持try-with-resources语句</h3><p>Java 7引入了自动资源管理机制，开发人员可以通过try-with-resources语句很方便地完成资源的管理。在Groovy 3中也对其进行了支持。举些例子：</p>
<h4 id="try-with-resources语句示例"><a href="#try-with-resources语句示例" class="headerlink" title="try-with-resources语句示例"></a>try-with-resources语句示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span> <span class="keyword">implements</span> <span class="title">Closeable</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> resourceId;</span><br><span class="line">    <span class="keyword">static</span> closedResourceIds = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Resource(<span class="keyword">int</span> resourceId) &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceId = resourceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> close() &#123;</span><br><span class="line">        closedResourceIds &lt;&lt; resourceId</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> (Resource r1 = <span class="keyword">new</span> Resource(<span class="number">1</span>)) &#123;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> Resource.closedResourceIds == [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="number">2</span> == a</span><br></pre></td></tr></table></figure>
<h3 id="5-支持代码块"><a href="#5-支持代码块" class="headerlink" title="5. 支持代码块"></a>5. 支持代码块</h3><p>在Java中有一种不常用但比较有用的语法可以方便地隔离变量的作用范围，即代码块。Groovy 3也对其进行了支持。举些例子：</p>
<h4 id="代码块示例"><a href="#代码块示例" class="headerlink" title="代码块示例"></a>代码块示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">def</span> a = <span class="number">1</span></span><br><span class="line">    a++</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">2</span> == a</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">def</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> == a</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="6-支持Java风格的数组初始化"><a href="#6-支持Java风格的数组初始化" class="headerlink" title="6. 支持Java风格的数组初始化"></a>6. 支持Java风格的数组初始化</h3><p>为了更好地兼容Java语法，Groovy 3新增了对Java风格的数组初始化的支持。</p>
<h4 id="数组初始化示例"><a href="#数组初始化示例" class="headerlink" title="数组初始化示例"></a>数组初始化示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> a = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">    <span class="keyword">assert</span> a[<span class="number">0</span>] == <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> a[<span class="number">1</span>] == <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> a <span class="keyword">as</span> List == [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h3 id="7-支持interface的默认方法（default-method）"><a href="#7-支持interface的默认方法（default-method）" class="headerlink" title="7. 支持interface的默认方法（default method）"></a>7. 支持interface的默认方法（default method）</h3><p>在Java 8引入的众多新特性中，interface的默认方法（default method）也是十分有用的一个特性。Groovy 3自然也不会遗漏对其进行支持。举些例子：</p>
<h4 id="默认方法（default-method）示例"><a href="#默认方法（default-method）示例" class="headerlink" title="默认方法（default method）示例"></a>默认方法（default method）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Greetable</span> &#123;</span></span><br><span class="line">    String name();</span><br><span class="line">    <span class="keyword">default</span> String hello() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">public</span> String sayHello() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hello() + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.name()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Greetable</span> &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Daniel&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;hello, Daniel&#x27;</span> == <span class="string">&quot;$&#123;p.hello()&#125;, $&#123;p.name()&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;hello, Daniel&#x27;</span> == p.sayHello()</span><br></pre></td></tr></table></figure>
<h3 id="8-新增操作符：一致性操作符（-、-）、Elvis赋值（-）、-in、-instanceof"><a href="#8-新增操作符：一致性操作符（-、-）、Elvis赋值（-）、-in、-instanceof" class="headerlink" title="8. 新增操作符：一致性操作符（===、!==）、Elvis赋值（?=）、!in、!instanceof"></a>8. 新增操作符：一致性操作符（<code>===</code>、<code>!==</code>）、Elvis赋值（<code>?=</code>）、<code>!in</code>、<code>!instanceof</code></h3><p>为了令Groovy程序更加简洁，Groovy 3引入了这些新的操作符。举些例子：</p>
<h4 id="一致性操作符（-、-）示例"><a href="#一致性操作符（-、-）示例" class="headerlink" title="一致性操作符（===、!==）示例"></a>一致性操作符（<code>===</code>、<code>!==</code>）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;abc&#x27;</span> === <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;abc&#x27;</span> !== <span class="keyword">new</span> String(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Elvis赋值（-）示例"><a href="#Elvis赋值（-）示例" class="headerlink" title="Elvis赋值（?=）示例"></a>Elvis赋值（<code>?=</code>）示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> a = <span class="number">2</span></span><br><span class="line">a ?= <span class="number">1</span></span><br><span class="line">assert a == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a = null</span><br><span class="line">a ?= <span class="number">1</span></span><br><span class="line">assert a == <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="in示例"><a href="#in示例" class="headerlink" title="!in示例"></a>!in示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> !<span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h4 id="instanceof示例"><a href="#instanceof示例" class="headerlink" title="!instanceof示例"></a>!instanceof示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">1</span> !<span class="keyword">instanceof</span> String</span><br></pre></td></tr></table></figure>
<h3 id="9-支持安全检索"><a href="#9-支持安全检索" class="headerlink" title="9. 支持安全检索"></a>9. 支持安全检索</h3><p>Groovy对null有一种安全的操作方式，即通过<code>?.</code>进行引用，这样可以避免NullPointerException的发生，但缺少对集合和数组的安全检索的支持，在Groovy 3弥补了这点缺憾。举些例子：</p>
<h4 id="安全检索示例"><a href="#安全检索示例" class="headerlink" title="安全检索示例"></a>安全检索示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">String[] array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">assert</span> <span class="string">&#x27;b&#x27;</span> == array?[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">array?[<span class="number">1</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">assert <span class="string">&#x27;c&#x27;</span> == array?[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">array = null;</span><br><span class="line">assert null == array?[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">array?[<span class="number">1</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">assert null == array?[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<h3 id="10-支持运行时Groovydoc以及将Groovydoc作为元数据保存于AST节点中"><a href="#10-支持运行时Groovydoc以及将Groovydoc作为元数据保存于AST节点中" class="headerlink" title="10. 支持运行时Groovydoc以及将Groovydoc作为元数据保存于AST节点中"></a>10. 支持运行时Groovydoc以及将Groovydoc作为元数据保存于AST节点中</h3><p>Groovy 3新增了运行时Groovydoc，即可在运行时访问该Groovydoc内容，与传统Groovydoc的差别在于运行时Groovydoc以<code>/**@</code>开头（详见以下示例）。如果说Javadoc伴随Java源码是对文档重视的一种体现，那么运行时Groovydoc则更进一步，它保存于bytecode中，与程序做到了真正的结合。</p>
<p>注：该特性需将<code>groovy.attach.runtime.groovydoc</code>设置为<code>true</code>，即<code>-Dgroovy.attach.runtime.groovydoc=true</code>，方可启用。</p>
<h4 id="运行时Groovydoc示例"><a href="#运行时Groovydoc示例" class="headerlink" title="运行时Groovydoc示例"></a>运行时Groovydoc示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**@</span></span><br><span class="line"><span class="comment"> * class AA</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> &#123;</span></span><br><span class="line">    <span class="comment">/**@</span></span><br><span class="line"><span class="comment">     * field SOME_FIELD</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SOME_FIELD = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span></span><br><span class="line"><span class="comment">     * constructor AA</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AA() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span></span><br><span class="line"><span class="comment">     * method m</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> m() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**@</span></span><br><span class="line"><span class="comment">     * class InnerClass</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**@</span></span><br><span class="line"><span class="comment"> * annotation BB</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@interface</span> BB &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;class AA&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getMethod(<span class="string">&#x27;m&#x27;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]).getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;method m&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getConstructor().getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;constructor AA&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getField(<span class="string">&#x27;SOME_FIELD&#x27;</span>).getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;field SOME_FIELD&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> AA.<span class="keyword">class</span>.getDeclaredClasses().find &#123;it.simpleName.contains(<span class="string">&#x27;InnerClass&#x27;</span>)&#125;.getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;class InnerClass&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> BB.<span class="keyword">class</span>.getAnnotation(groovy.lang.Groovydoc).value().contains(<span class="string">&#x27;annotation BB&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="将Groovydoc作为元数据保存于AST节点中的示例"><a href="#将Groovydoc作为元数据保存于AST节点中的示例" class="headerlink" title="将Groovydoc作为元数据保存于AST节点中的示例"></a>将Groovydoc作为元数据保存于AST节点中的示例</h4><p>注：该特性需将<code>groovy.attach.groovydoc</code>设置为<code>true</code>，即<code>-Dgroovy.attach.groovydoc=true</code>，方可启用。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.codehaus.groovy.control.*</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.groovy.parser.antlr4.GroovydocManager.DOC_COMMENT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * Groovydoc for hello method</span></span><br><span class="line"><span class="string"> * @author Daniel Sun</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">void hello(String name) &#123;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> ast = <span class="keyword">new</span> CompilationUnit().tap &#123;</span><br><span class="line">    addSource <span class="string">&#x27;hello.groovy&#x27;</span>, code</span><br><span class="line">    compile Phases.SEMANTIC_ANALYSIS </span><br><span class="line">&#125;.ast</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> ast.classes[<span class="number">0</span>].methods.grep(e -&gt; e.name == <span class="string">&#x27;hello&#x27;</span>)[<span class="number">0</span>].nodeMetaData[DOC_COMMENT].contains(<span class="string">&#x27;Groovydoc for hello method&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>仿照Donald Trump的”Make America Great Again”，我希望Groovy 3可以”Make Groovy Great Again”</p>
]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy 3</tag>
        <tag>Parrot Parser</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy 4之新特性GINQ预览</title>
    <url>/2021/05/03/Groovy-4%E4%B9%8B%E6%96%B0%E7%89%B9%E6%80%A7GINQ%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>C#最先引入了LINQ特性，其强大的功能令我垂涎已久，并琢磨着为Groovy也添加类似特性，终于在Groovy 4中决定完成这一夙愿。GINQ是Groovy-Integrated Query的缩写，意在对集合的操作以类SQL的方式完成，将来或许会扩展至对数据库的支持。另外，结合Groovy将XML, JSON, YAML等文本解析为集合的特性，GINQ可天然地支持对这些文本内容进行查询。<span id="more"></span></p>
<h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><p>为了保持语法的向下兼容，没有为GINQ引入新语法，而是以DSL形式实现，其处理过程如下：</p>
<p><strong>Groovy DSL</strong>  <code>--解析--&gt;</code>  <strong>Groovy AST</strong>  <code>--变换--&gt;</code>  <strong>GINQ AST</strong>  <code>--优化--&gt;</code>  <strong>优化后的GINQ AST</strong>  <code>--生成--&gt;</code>  <strong>目标Groovy AST</strong></p>
<h3 id="解析阶段"><a href="#解析阶段" class="headerlink" title="解析阶段"></a>解析阶段</h3><p>借助Groovy既有的解析器Parrot，将Groovy DSL源码解析为Groovy AST，该AST对于Groovy而言是通用的但缺乏“个性”，难以方便地描述GINQ的形态。</p>
<h3 id="变换阶段"><a href="#变换阶段" class="headerlink" title="变换阶段"></a>变换阶段</h3><p>为了方便地描述GINQ，我设计了GINQ AST。在获得了Groovy AST之后，比对GINQ AST规范，将Groovy AST变换为GINQ AST。</p>
<h3 id="优化阶段"><a href="#优化阶段" class="headerlink" title="优化阶段"></a>优化阶段</h3><p>原始GINQ AST的结构可能不是最优，需要做进一步的变换优化，比如存在先关联再筛选的情况，需要将筛选节点下沉，作用于数据源节点。</p>
<h3 id="生成阶段"><a href="#生成阶段" class="headerlink" title="生成阶段"></a>生成阶段</h3><p>无论是操作集合还是操作数据库，都生成可实际执行的代码。为了这个目标，先将优化后的GINQ AST变换为目标代码对应的Groovy AST，然后借助Groovy既有的编译特性生成bytecode。</p>
<h2 id="特性预览"><a href="#特性预览" class="headerlink" title="特性预览"></a>特性预览</h2><p>GINQ的代码需要放置在<code>GQ &#123;...&#125;</code>块中，这样Groovy便可将其识别为GINQ DSL （更多详细内容可以查看<span class="exturl" data-url="aHR0cDovL2RvY3MuZ3Jvb3Z5LWxhbmcub3JnL2RvY3MvbmV4dC9odG1sL2RvY3VtZW50YXRpb24vI19xdWVyeWluZ19jb2xsZWN0aW9uc19pbl9zcWxfbGlrZV9zdHlsZQ==">官方文档<i class="fa fa-external-link-alt"></i></span>）</p>
<h3 id="例子1：筛选出List实例中大于1并且小于等于5的元素"><a href="#例子1：筛选出List实例中大于1并且小于等于5的元素" class="headerlink" title="例子1：筛选出List实例中大于1并且小于等于5的元素"></a>例子1：筛选出List实例中大于1并且小于等于5的元素</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    where n &gt; <span class="number">1</span> &amp;&amp; n &lt;= <span class="number">5</span></span><br><span class="line">    select n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：任何Groovy的操作符均可在<code>where</code>中使用，比如<code>in</code>, <code>!in</code>等，而数据源可以是<code>Iterable</code>, <code>Stream</code>, 数组以及GINQ执行结果。</p>
<h3 id="例子2：将List实例中的元素先按长度再按内容进行排序"><a href="#例子2：将List实例中的元素先按长度再按内容进行排序" class="headerlink" title="例子2：将List实例中的元素先按长度再按内容进行排序"></a>例子2：将List实例中的元素先按长度再按内容进行排序</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from s <span class="keyword">in</span> [<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bcd&#x27;</span>]</span><br><span class="line">    orderby s.length() <span class="keyword">in</span> desc, s</span><br><span class="line">    select s</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;bcd&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：默认升序<code>asc</code>。另外，<code>null</code>值的排序规则可通过<code>nullslast</code>以及<code>nullsfirst</code>指定，比如：<code>asc(nullslast)</code>, <code>asc(nullsfirst)</code>, <code>desc(nullslast)</code>, <code>desc(nullsfirst)</code>，而<code>asc</code>是<code>asc(nullslast)</code>的缩写，<code>desc</code>是<code>desc(nullslast)</code>的缩写。</p>
<h3 id="例子3：在List实例中选取序号为1开始的2个元素"><a href="#例子3：在List实例中选取序号为1开始的2个元素" class="headerlink" title="例子3：在List实例中选取序号为1开始的2个元素"></a>例子3：在List实例中选取序号为1开始的2个元素</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from n <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    limit <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    select n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">4</span>, <span class="number">5</span>] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：序号从<code>0</code>开始</p>
<h3 id="例子4：关联2个List实例并筛选满足条件的元素"><a href="#例子4：关联2个List实例并筛选满足条件的元素" class="headerlink" title="例子4：关联2个List实例并筛选满足条件的元素"></a>例子4：关联2个List实例并筛选满足条件的元素</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    join m <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>] on m == n</span><br><span class="line">    where n &gt; <span class="number">1</span> &amp;&amp; n &lt;= <span class="number">5</span> &amp;&amp; m &gt; <span class="number">3</span> &amp;&amp; m &lt;= <span class="number">8</span></span><br><span class="line">    select n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [<span class="number">4</span>, <span class="number">5</span>] == result.toList()</span><br></pre></td></tr></table></figure>

<h3 id="例子5：按模2的结果对List实例中的元素进行分组并计算"><a href="#例子5：按模2的结果对List实例中的元素进行分组并计算" class="headerlink" title="例子5：按模2的结果对List实例中的元素进行分组并计算"></a>例子5：按模2的结果对List实例中的元素进行分组并计算</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from n <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    groupby n % <span class="number">2</span> <span class="keyword">as</span> k <span class="comment">// 取个别名k</span></span><br><span class="line">    select k, count(), min(n), max(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [[<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>], [<span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>]] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：目前已支持的聚合函数有：<code>count</code>, <code>min</code>, <code>max</code>, <code>sum</code>, <code>avg</code>, <code>median</code>, <code>stdev</code>, <code>stdevp</code>, <code>var</code>, <code>varp</code>, <code>agg</code></p>
<h3 id="例子6：将List实例中的元素按元素长度分区再按内容降序排列并选取元素的前一个元素"><a href="#例子6：将List实例中的元素按元素长度分区再按内容降序排列并选取元素的前一个元素" class="headerlink" title="例子6：将List实例中的元素按元素长度分区再按内容降序排列并选取元素的前一个元素"></a>例子6：将List实例中的元素按元素长度分区再按内容降序排列并选取元素的前一个元素</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from s <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;bc&#x27;</span>]</span><br><span class="line">    select s, (lead(s) over(partitionby s.length() orderby s <span class="keyword">in</span> desc))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [[<span class="string">&#x27;a&#x27;</span>, <span class="literal">null</span>], [<span class="string">&#x27;ab&#x27;</span>, <span class="literal">null</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;bc&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>]] == result.toList()</span><br></pre></td></tr></table></figure>
<p>注：目前已支持的窗口函数有：<code>rowNumber</code>, <code>rank</code>, <code>denseRank</code>, <code>percentRank</code>, <code>cumeDist</code>, <code>ntile</code>, <code>lead</code>, <code>lag</code>, <code>firstValue</code>, <code>lastValue</code>, <code>nthValue</code>, <code>count</code>, <code>min</code>, <code>max</code>, <code>sum</code>, <code>avg</code>, <code>median</code>, <code>stdev</code>, <code>stdevp</code>, <code>var</code>, <code>varp</code></p>
<h3 id="例子7：查询JSON内容"><a href="#例子7：查询JSON内容" class="headerlink" title="例子7：查询JSON内容"></a>例子7：查询JSON内容</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> json = <span class="keyword">new</span> groovy.json.JsonSlurper().parseText(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        &quot;fruits&quot;: [</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Orange&quot;, &quot;price&quot;: 11&#125;,</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Apple&quot;, &quot;price&quot;: 6&#125;,</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Banana&quot;, &quot;price&quot;: 4&#125;,</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Mongo&quot;, &quot;price&quot;: 29&#125;,</span></span><br><span class="line"><span class="string">            &#123;&quot;name&quot;: &quot;Durian&quot;, &quot;price&quot;: 32&#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> result = GQ &#123;</span><br><span class="line">    from f <span class="keyword">in</span> json.fruits</span><br><span class="line">    where f.price &lt; <span class="number">32</span></span><br><span class="line">    orderby f.price <span class="keyword">in</span> desc</span><br><span class="line">    select f.name, f.price</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> [[<span class="string">&#x27;Mongo&#x27;</span>, <span class="number">29</span>], [<span class="string">&#x27;Orange&#x27;</span>, <span class="number">11</span>], [<span class="string">&#x27;Apple&#x27;</span>, <span class="number">6</span>], [<span class="string">&#x27;Banana&#x27;</span>, <span class="number">4</span>]] == result.toList()</span><br></pre></td></tr></table></figure>

<h3 id="例子8：列表推导式（List-Comprehension）"><a href="#例子8：列表推导式（List-Comprehension）" class="headerlink" title="例子8：列表推导式（List Comprehension）"></a>例子8：列表推导式（List Comprehension）</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> [<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>] == GQL &#123;from n <span class="keyword">in</span> <span class="number">1.</span>.&lt;<span class="number">11</span> where n % <span class="number">2</span> == <span class="number">0</span> select n ** <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p>注：<code>GQL &#123;...&#125;</code> 等价于 <code>GQ &#123;...&#125; as List</code></p>
<h3 id="例子N"><a href="#例子N" class="headerlink" title="例子N"></a>例子N</h3><p>点击链接查看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9ncm9vdnkvYmxvYi9tYXN0ZXIvc3VicHJvamVjdHMvZ3Jvb3Z5LWdpbnEvc3JjL3NwZWMvdGVzdC9vcmcvYXBhY2hlL2dyb292eS9naW5xL0dpbnFUZXN0Lmdyb292eQ==">更多例子<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy 4</tag>
        <tag>GINQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Groovy之前世今生</title>
    <url>/2021/04/04/Groovy%E4%B9%8B%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    <content><![CDATA[<p>Groovy最初于2003年由James Strachan设计并实现了其原型，迄今已十八岁。Groovy的成长过程，也是众多智者贡献心力的过程。而我大约在2006年底开始研究Groovy，那时Groovy 1.0正式版还没发布，主要由Jochen Theodorou一人维护，所以Jochen Theodorou在我心里一直是Groovy的养父。当初如果没有他的坚持，Groovy很可能早已夭折。而在Groovy 1.0正式版本发布后，Groovy的贡献者逐渐增多，其中令我印象比较深刻的贡献者有以下这么几位：<span id="more"></span></p>
<ul>
<li>Jochen Theodorou</li>
<li>Paul King</li>
<li>Cédric Champeau</li>
<li>Guillaume Laforge</li>
<li>Dierk König</li>
<li>Eric Milles</li>
<li>Alex Tkachman</li>
<li>John Wilson</li>
<li>Russel Winder（已故）</li>
<li>Danno Ferrin</li>
<li>Hamlet D’Arcy</li>
<li>Jeremy Rayner</li>
<li>John Wagenleitner</li>
<li>Sergei Egorov</li>
<li>Andres Almiray</li>
</ul>
<p>还有一位鲜有人提及的但语言造诣很高的布道师Gavin Grover。下面是Paul King撰写的一篇关于Groovy发展历史的论文，带领大家回顾Groovy的前世今生：</p>
<div class="pdfobject-container" data-target="/2021/04/04/Groovy之前世今生/A.History.of.the.Groovy.Programming.Language.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>Groovy</category>
      </categories>
      <tags>
        <tag>Groovy History</tag>
      </tags>
  </entry>
  <entry>
    <title>My first blog</title>
    <url>/2017/03/19/My-first-blog/</url>
    <content><![CDATA[<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println <span class="string">&quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis之查询返回记录字段不全问题的解决方法</title>
    <url>/2017/04/28/MyBatis%E4%B9%8B%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E5%AD%97%E6%AE%B5%E4%B8%8D%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>当select的返回记录类型设置为map(或者其他Map类型，比如java.util.HashMap等)时，返回的map对象可能并未包含所有字段，即只出现有值的字段，而这恰恰是MyBatis的默认处理方式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>  <span class="attr">...</span>  <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了解决记录字段不全这个问题，我们可以在<code>settings</code>中增加callSettersOnNulls的设置，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;callSettersOnNulls&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>解决方案就这么简单，但研究MyBatis源码以分析解决该问题略微坎坷，希望对大家有用。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
</search>
